# ReDoS test and attack experiment environment


## ReDoS regex attack string generate tools

The `tools/` folder contains the tools for generating regex attack strings.

### 0  Guidelines

**Rebuild/test Docker image `baselines_only` after any change. Always run programs in docker container, do not run programs in local environment.**

**Keep directory contents minimal—source, README, tests, and build artefacts only.**

**DOCKERFILE MODIFICATION RULE: When adding new tools, ALL Dockerfile modifications must be added AFTER the engines build section. Look for the comment "CURSOR RULE: ALL FUTURE TOOL MODIFICATIONS MUST BE ADDED BELOW THIS LINE" in the Dockerfile and add any new tool dependencies, builds, or tests after this line. This ensures engines remain unchanged and new tools are properly isolated.**

### 1  Project Layout

```
tools/
├── <tool>/
│   ├── src… / Makefile (or build script)
│   ├── README.md
│   ├── tests/
│   ├── run.py
```

The tool could be written in any language, but always use a python script `run.py` to use it.

** The tool may used to generate attack string for ReDoS regex as a fixed length (100KB/1MB). Modify it to output the attack string in the format of `{prefix}{infix}{suffix}` and get the repeat times of the infix in the attack string which recommended by the tool. **

Build the tool from source code when build docker image.

### 2  Program Contract

* **Args:**
  1. Base64 regex 2. output file path
* **Output:**
  1. a output json file with the following format:
    ```json
    {
      "elapsed_ms": "elapsed_ms",
      "is_redos": true or false, // following results are only valid if is_redos is true
      "prefix": "a base64 encoded prefix of attack string",
      "infix": "a base64 encoded infix of attack string",
      "suffix": "a base64 encoded suffix of attack string",
      "repeat_times": "the repeat times of the infix in the attack string which recommended by the tool, if the tool does not recommend, set it to -1"
    }
    ```

### 3  README Template

```markdown
# ReDoS regex attack string generate tools

## Files
<brief list>

## Building and Running
### Build
<commands>
### Run tests
<commands>

## Program Usage
<example>

## Directory Structure
<tree>

```

* No Docker instructions. Keep focus on local build/run.

## Multi-Language Regex Engines

Multi-language regex engines are implemented in the `engines/` folder.

### 1  Project Layout

```
engines/
├── <language>/
│   ├── src… / Makefile (or build script)
│   ├── README.md
│   ├── tests/
│   ├── run_tests.sh   ├── simple_test.sh
│   ├── test_data.txt  ├── simple_test.txt
│   └── full_match_test.txt
└── bin/ (created **only** by the build, never checked-in)
```

### 2  Program Contract

* **Args:**

  1. Base64 regex 2. text file path 3. mode (0 = partial, 1 = full).
* **Output:**
  `{elapsed_ms_with_6dp} - {match_count}`
* Test data and Base64 patterns must be identical in every language.

### 3  README Template

```markdown
# Benchmark Program – <Language>

## Files
<brief list>

## Building and Running
### Build
<commands>
### Run tests
<commands>

## Program Usage
<example>

## Directory Structure
<tree>
```


